Accomplishments:
- Allow user to log in as either an exec or a member
- Allow users to view a list of games or events
- Allow user to view the details of a certain game (publisher, genre, club copies, etc.) or event (description, date, time, location, host, etc.)
- Allow users to search for games given certain search parameters (title, publisher, genre, play time, etc.)
- Allow users to view some interesting statistics related to games, events or members
- Allow execs to add, edit or delete a new game or event


SELECTION AND PROJECTION QUERIES:
Search queries - users can search for games based on a number of different parameters, where search results return any games that satisfy all of the specified criteria (ie. title, publisher, genre, max play time, etc.)


Given any array of Game attribute criterion:

SELECT title, rating, publishername AS publisher 
FROM games LEFT JOIN publishedby ON title = gametitle ' +
WHERE lower(title) LIKE lower('%req.body.title%') 
	AND minPlayer = req.body.minPlayer
	AND ...etc. where the conditions depend on what is specified by the user

Get information on all current events
SELECT * FROM events


JOIN QUERY:

Given genre, produce the game title, rating and publishers matching the condition: 
SELECT hg.gametitle as title, g.rating, g.description, publishername FROM games g LEFT JOIN publishedBy p ON g.title = p.gameTitle, hasgenre hg 
'WHERE HG.gametitle = title AND lower(hg.genrename) LIKE lower('%genre+%')


Given publisher or country of publisher, produce the game title, rating and publishers matching the condition: 
if (req.body.publisher) where += ' AND lower(p.name) LIKE lower(\'%' + req.body.publisher + '%\')';
if (req.body.country) where += ' AND lower(p.country) LIKE lower(\'%' + req.body.country + '%\')';

'SELECT g.title, g.rating, g.description, pb2.publishername as publisher ' +
'FROM games g LEFT JOIN publishedby pb2 ON g.title = pb2.gametitle, publishers p, publishedby pb ' +
'WHERE g.title = pb.gametitle AND pb.publishername = p.name ' + where;

Given the title of a game, return all information about the game, the number of copies the club has, the number currently available, and publisher information

	SELECT * FROM (SELECT COUNT(*) AS availablecopies FROM GameInstances 
    	WHERE gametitle = $1 AND borrowed = 0) free, (SELECT COUNT(*) AS totalCopies 
    	FROM GameInstances WHERE gameTitle = $1) total
    	 	LEFT JOIN Games g ON $1 = g.title
    	 	LEFT JOIN Hasgenre h ON $1 = h.gametitle
    	 	LEFT JOIN publishedBy p ON $1 = p.gametitle

DIVISION QUERY:

Return the memberNumber and Name of members who have attended all events that were hosted this year.

	SELECT I.name FROM members I 
	WHERE I.memberNumber = (SELECT M.membernumber FROM members M EXCEPT' +
    												(SELECT DISTINCT memberNumber FROM 
    																((SELECT M.memberNumber, E.name, E.date 
    																FROM members M, events E 
    																WHERE E.date between '2017-09-01' AND '2018-05-01') EXCEPT (
    																				SELECT * FROM Attends 
    																				WHERE Attends.eventdate between '2017-09-01' AND '2018-05-01')) AS foo))

AGGREGATION QUERY: 

Get game with highest or lowest rating depending on what user specifies

	SELECT title, rating, description  
	FROM games WHERE rating = ( SELECT MIN/MAX(g.rating) FROM games g)


NESTED AGGREGATION QUERY: 
Finds the average number of attendees at all games with the same name, and returns the event with the lowest/highest (depending on user) average number of attendees

	SELECT y.name, y.avg 
	FROM 	(SELECT c.name, AVG(c.attendees) as avg 
			FROM (SELECT name, COUNT(a) as attendees 
			 	FROM events e, attends a 
			 	WHERE a.eventName = e.name  AND a.eventDate = e.date 
			 	GROUP BY e.name, e.date ) c 
			GROUP BY c.name) y,  
	
				(SELECT MAX(x.avg) as max 
				FROM (SELECT c.name, AVG(c.attendees) as avg 
				  	FROM (SELECT name, COUNT(a) as attendees 
							FROM events e, attends a 
							WHERE a.eventName = e.name  AND a.eventDate = e.date 
							GROUP BY e.name, e.date ) c 
				GROUP BY c.name) x) z 
	WHERE y.avg = z.max

UPDATE OPERATION:

	UPDATE events SET name = $1, date = $2, description = $3, startTime = $4, endTime = $5, location = $6 WHERE name = $1 AND date = $2


DELETE OPERATION:

	DELETE FROM events WHERE name = $1
	DELETE FROM games WHERE title = $1



MISCELLANOUS

	'SELECT events.*, members.name as hosts, attend.* ' +
            	'FROM (SELECT COUNT(*) AS attending FROM attends WHERE attends.eventName = ' + req.params.name +
            	' AND attends.eventDate = ' + req.params.date + ') attend, events, hosts, members ' +
            	'WHERE events.name = ' + req.params.name + ' AND events.date = ' + req.params.date +
            	' AND hosts.eventName = ' + req.params.name + ' AND hosts.eventDate = ' + req.params.date +
            	' AND hosts.memberNumber = members.memberNumber'
	
	
	SELECT members.name
  	FROM executives, members
	
  	WHERE executives.memberNumber = members.memberNumber
    ORDER BY members.memberNumber
	
	
	SELECT genres.name
  	FROM genres
  	ORDER BY genres.name
	
	
	SELECT publishers.name
	FROM publishers ' 
  	ORDER BY publishers.name


 
EDITS A GAME:
 var title = req.body.title;
  var rating = req.body.rating;
  var minPlayers = req.body.minPlayers;
  var maxPlayers = req.body.maxPlayers;
  var minPlaytime = req.body.minPlaytime;
  var maxPlaytime = req.body.maxPlaytime;
  var yearPublished = req.body.yearPublished;
  var description = req.body.description;
  var difficulty = req.body.difficulty;
  var sql = new PQ('UPDATE games ' +
    'SET title = $1, rating = $2, minPlayer = $3, maxPlayer = $4, minPlaytime = $5, maxPlaytime = $6, yearPublished = $7, description = $8, difficulty = $9 ' +
    'WHERE title = $1');
	var sql2 = new PQ('DELETE FROM PublishedBy WHERE gametitle = $1');
	var sql3 = new PQ('DELETE FROM HasGenre WHERE gametitle = $1');
	sql2.values = [req.body.title];
	sql3.values = [req.body.title];
	var sql4 = new PQ('INSERT INTO PublishedBy VALUES($1, $2)');
	var sql5 = new PQ('INSERT INTO HasGenre VALUES($1, $2)');


INSERTS A GAME
	var sql = new PQ('INSERT INTO Games VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)');
	sql.values = [req.body.title, req.body.rating, req.body.minPlayers, req.body.maxPlayers, req.body.minPlaytime, req.body.maxPlaytime, req.body.yearPublished, req.body.description, req.body.difficulty];
	var sql2 = new PQ('INSERT INTO PublishedBy VALUES($1, $2)');
	var sql3 = new PQ('INSERT INTO HasGenre VALUES($1, $2)');
	var sql4 = new PQ('SELECT max(id) as id FROM GameInstances WHERE gameTitle = $1');
	sql4.values = [req.body.title];
	var sql5 = new PQ('INSERT INTO GameInstances VALUES($1, $2, $3, $4, $5)');